// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // xM value input  (M = contents of RAM[A])
        instruction[16], // xInstruction for execution
        reset;           // xSignals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // xM value output
        writeM,          // xWrite into M? 
        addressM[15],    // xRAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
     // Instruction Decoding
     Insticode(in=instruction,i=icode);
     DMux16(in=instruction,sel=icode,a=ainst,b=binst);
     InstDec(in=binst,a=acode,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,writeMem=writeMem,writeD=writeD,writeA=writeA,jgtz=jgtz,jeqz=jeqz,jltz=jltz);

     //ALU
     Mux16(a=outrega,b=inM,sel=acode,out=inputy); //M oder A
     ALU(x=inputx,y=inputy,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,zr=zr,ng=ng,out=outalu);

     //Write M
     And16(a=outalu,b=true,out=outM);
     And(a=writeMem,b=true,out=writeM);

     //Register A
     Mux16(a=ainst,b=outalu,sel=writeA,out=inrega); //ROM oder ALU Input
     Not(in=icode,out=aaa);
     Xor(a=aaa,b=writeA,out=selrega);
     Register(in=inrega,load=selrega,out=outrega);
     AddressM(in=outrega,out=addressM);

     //Register D
     DRegister(in=outalu,load=writeD,out=inputx);

     //PC
     Not(in=ng,out=notng);
     Xor(a=notng,b=zr,out=gtz);
     And(a=jgtz,b=gtz,out=j1);
     And(a=jeqz,b=zr,out=j2);
     And(a=jltz,b=ng,out=j3);
     Or(a=j1,b=j2,out=j4); //Wenn eines 1
     Or(a=j3,b=j4,out=jump);
     Not(in=jump,out=notjump);
     PC(in=outrega,reset=reset,load=jump,inc=notjump,out=outpc);
     AddressM(in=outpc,out=pc);
}
